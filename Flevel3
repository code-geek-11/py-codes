def flatten(df, max_level=3):
    """
    Recursively flattens a DataFrame up to a specified nesting level.
    """
    current_level = 0

    while current_level < max_level:
        complex_fields = []
        for field in df.schema.fields:
            if isinstance(field.dataType, StructType):
                complex_fields.append((field.name, "struct"))
            elif isinstance(field.dataType, ArrayType) and isinstance(field.dataType.elementType, StructType):
                complex_fields.append((field.name, "array_struct"))

        if not complex_fields:
            break

        for col_name, kind in complex_fields:
            print(f"\n[Level {current_level}] Processing: {col_name} ({kind})")

            if kind == "struct":
                expanded = [col(f"{col_name}.{field.name}").alias(f"{col_name}_{field.name}")
                            for field in df.schema[col_name].dataType.fields]
                df = df.select("*", *expanded).drop(col_name)

            elif kind == "array_struct":
                df = df.withColumn(col_name, explode_outer(col(col_name)))

        current_level += 1
        print(f"[Level {current_level}] Row count: {df.count()}")

    return df
